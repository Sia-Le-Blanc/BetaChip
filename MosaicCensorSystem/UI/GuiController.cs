#nullable disable
using System;
using System.Collections.Generic;
using System.Drawing;
using System.Globalization;
using System.Linq;
using System.Resources;
using System.Threading;
using System.Windows.Forms;
using MosaicCensorSystem.Detection;

namespace MosaicCensorSystem.UI
{
    public class GuiController
    {
        // --- Events ---
        public event Action<int> FpsChanged;
        public event Action<bool> DetectionToggled;
        public event Action<bool> CensoringToggled;
        public event Action<bool> StickerToggled; // Ïä§Ìã∞Ïª§ ÌÜ†Í∏Ä Ïù¥Î≤§Ìä∏ Ï∂îÍ∞Ä
        public event Action<CensorType> CensorTypeChanged;
        public event Action<int> StrengthChanged;
        public event Action<float> ConfidenceChanged;
        public event Action StartClicked;
        public event Action StopClicked;
        public event Action TestCaptureClicked;
        public event Action<List<string>> TargetsChanged;

        // --- UI Ïª®Ìä∏Î°§Îì§ÏùÑ Î©§Î≤Ñ Î≥ÄÏàòÎ°ú ÏÑ†Ïñ∏ ---
        private readonly Form rootForm;
        private Label titleLabel;
        private ComboBox languageComboBox;
        private Label statusLabel;
        private TextBox logTextBox;
        private Button startButton, stopButton, testButton;
        private GroupBox controlGroup, settingsGroup, logGroup, targetsGroup;
        private Label gpuStatusLabel;
        private Label fpsLabel, strengthLabel, confidenceLabel;
        private CheckBox enableDetectionCheckBox, enableCensoringCheckBox, enableStickersCheckBox; // Ïä§Ìã∞Ïª§ Ï≤¥ÌÅ¨Î∞ïÏä§ Ï∂îÍ∞Ä
        private RadioButton mosaicRadioButton, blurRadioButton;
        private readonly Dictionary<string, CheckBox> targetCheckBoxes = new Dictionary<string, CheckBox>();

        // Î¶¨ÏÜåÏä§ Îß§ÎãàÏ†Ä
        private ResourceManager resourceManager;
        private string currentGpuStatus = "CPU"; // ÌòÑÏû¨ GPU ÏÉÅÌÉú Ï†ÄÏû•

        public GuiController(Form mainForm)
        {
            rootForm = mainForm;
            // Î¶¨ÏÜåÏä§ Îß§ÎãàÏ†Ä Ï¥àÍ∏∞Ìôî
            resourceManager = new ResourceManager("MosaicCensorSystem.Properties.Strings", typeof(GuiController).Assembly);
            CreateGui();
            // ÌîÑÎ°úÍ∑∏Îû® ÏãúÏûë Ïãú Í∏∞Î≥∏ Ïñ∏Ïñ¥(ÌïúÍµ≠Ïñ¥)Î°ú UI ÌÖçÏä§Ìä∏Î•º ÏÑ§Ï†ïÌï©ÎãàÎã§.
            UpdateUIText(); 
        }

        private void CreateGui()
        {
            rootForm.SuspendLayout();
            
            titleLabel = new Label { 
                Font = new Font("Arial", 12, FontStyle.Bold), 
                BackColor = Color.LightSkyBlue, 
                BorderStyle = BorderStyle.FixedSingle, 
                TextAlign = ContentAlignment.MiddleCenter, 
                Height = 40, 
                Dock = DockStyle.Top 
            };
            
            // Ïñ∏Ïñ¥ Î≥ÄÍ≤Ω ÏΩ§Î≥¥Î∞ïÏä§ ÏÉùÏÑ± (Îçî ÏßÅÍ¥ÄÏ†ÅÏúºÎ°ú Í∞úÏÑ†)
            languageComboBox = new ComboBox { 
                Location = new Point(350, 5), 
                DropDownStyle = ComboBoxStyle.DropDownList,
                Size = new Size(100, 25),
                Font = new Font("Arial", 9, FontStyle.Bold)
            };
            languageComboBox.Items.AddRange(new string[] { "üá∞üá∑ ÌïúÍµ≠Ïñ¥", "üá∫üá∏ English" });
            languageComboBox.SelectedIndex = 0; // Í∏∞Î≥∏Í∞íÏùÑ 'ÌïúÍµ≠Ïñ¥'Î°ú ÏÑ§Ï†ï
            languageComboBox.SelectedIndexChanged += OnLanguageChanged;
            titleLabel.Controls.Add(languageComboBox);

            var scrollableContainer = new ScrollablePanel { Dock = DockStyle.Fill };
            rootForm.Controls.Add(scrollableContainer);
            rootForm.Controls.Add(titleLabel);
            
            CreateContent(scrollableContainer.ScrollableFrame);
            
            rootForm.ResumeLayout(false);
        }

        private void CreateContent(Panel parent)
        {
            int y = 10;
            statusLabel = new Label { 
                Font = new Font("Arial", 12, FontStyle.Bold), 
                ForeColor = Color.Red, 
                Location = new Point(10, y), 
                AutoSize = true 
            };
            parent.Controls.Add(statusLabel);
            y += 40;
            
            gpuStatusLabel = new Label { 
                Font = new Font("Arial", 10), 
                Location = new Point(10, y), 
                AutoSize = true 
            };
            parent.Controls.Add(gpuStatusLabel);
            y += 30;

            controlGroup = new GroupBox { Location = new Point(10, y), Size = new Size(460, 80) };
            startButton = new Button { 
                BackColor = Color.DarkGreen, 
                ForeColor = Color.White, 
                Font = new Font("Arial", 10, FontStyle.Bold), 
                Size = new Size(120, 40), 
                Location = new Point(20, 25) 
            };
            stopButton = new Button { 
                BackColor = Color.DarkRed, 
                ForeColor = Color.White, 
                Font = new Font("Arial", 10, FontStyle.Bold), 
                Size = new Size(120, 40), 
                Location = new Point(160, 25), 
                Enabled = false 
            };
            testButton = new Button { 
                BackColor = Color.DarkBlue, 
                ForeColor = Color.White, 
                Font = new Font("Arial", 10, FontStyle.Bold), 
                Size = new Size(120, 40), 
                Location = new Point(300, 25) 
            };
            startButton.Click += (s, e) => StartClicked?.Invoke();
            stopButton.Click += (s, e) => StopClicked?.Invoke();
            testButton.Click += (s, e) => TestCaptureClicked?.Invoke();
            controlGroup.Controls.AddRange(new Control[] { startButton, stopButton, testButton });
            parent.Controls.Add(controlGroup);
            y += 90;

            settingsGroup = new GroupBox { Location = new Point(10, y), Size = new Size(460, 380) }; // ÎÜíÏù¥ Ï¶ùÍ∞Ä
            CreateSettingsContent(settingsGroup);
            parent.Controls.Add(settingsGroup);
            y += 390;

            logGroup = new GroupBox { Location = new Point(10, y), Size = new Size(460, 120) };
            logTextBox = new TextBox { 
                Multiline = true, 
                ScrollBars = ScrollBars.Vertical, 
                ReadOnly = true, 
                Location = new Point(10, 20), 
                Size = new Size(440, 90), 
                Font = new Font("Consolas", 8.25f) 
            };
            logGroup.Controls.Add(logTextBox);
            parent.Controls.Add(logGroup);
        }
        
        private void CreateSettingsContent(GroupBox settingsGroup)
        {
            int y = 25;
            
            // FPS ÏÑ§Ï†ï
            var fpsValueLabel = new Label { Text = "15", Location = new Point(390, y), AutoSize = true };
            var fpsSlider = new TrackBar { 
                Minimum = 5, Maximum = 240, Value = 15, TickFrequency = 5, 
                Location = new Point(100, y - 5), Size = new Size(280, 45) 
            };
            fpsSlider.ValueChanged += (s, e) => { 
                fpsValueLabel.Text = fpsSlider.Value.ToString(); 
                FpsChanged?.Invoke(fpsSlider.Value); 
            };
            fpsLabel = new Label { Location = new Point(10, y), AutoSize = true };
            settingsGroup.Controls.AddRange(new Control[] { fpsLabel, fpsSlider, fpsValueLabel });
            y += 40;

            // Í∞êÏßÄ Î∞è Í≤ÄÏó¥ ÌôúÏÑ±Ìôî Ï≤¥ÌÅ¨Î∞ïÏä§
            enableDetectionCheckBox = new CheckBox { 
                Checked = true, 
                Location = new Point(10, y), 
                AutoSize = true 
            };
            enableDetectionCheckBox.CheckedChanged += (s, e) => DetectionToggled?.Invoke(enableDetectionCheckBox.Checked);
            
            enableCensoringCheckBox = new CheckBox { 
                Checked = true, 
                Location = new Point(200, y), 
                AutoSize = true 
            };
            enableCensoringCheckBox.CheckedChanged += (s, e) => CensoringToggled?.Invoke(enableCensoringCheckBox.Checked);
            
            settingsGroup.Controls.AddRange(new Control[] { enableDetectionCheckBox, enableCensoringCheckBox });
            y += 30;

            // Ïä§Ìã∞Ïª§ ÌôúÏÑ±Ìôî Ï≤¥ÌÅ¨Î∞ïÏä§ Ï∂îÍ∞Ä
            enableStickersCheckBox = new CheckBox { 
                Checked = false, 
                Location = new Point(10, y), 
                AutoSize = true,
                Text = "Ïä§Ìã∞Ïª§ ÌôúÏÑ±Ìôî" // Í∏∞Î≥∏ ÌÖçÏä§Ìä∏, UpdateUITextÏóêÏÑú Î≥ÄÍ≤ΩÎê®
            };
            enableStickersCheckBox.CheckedChanged += (s, e) => StickerToggled?.Invoke(enableStickersCheckBox.Checked);
            settingsGroup.Controls.Add(enableStickersCheckBox);
            y += 30;

            // Í≤ÄÏó¥ ÌÉÄÏûÖ ÎùºÎîîÏò§ Î≤ÑÌäº
            mosaicRadioButton = new RadioButton { 
                Checked = true, 
                Location = new Point(10, y), 
                AutoSize = true 
            };
            blurRadioButton = new RadioButton { 
                Location = new Point(150, y), 
                AutoSize = true 
            };
            EventHandler censorTypeHandler = (s, e) => { 
                if (s is RadioButton rb && rb.Checked) { 
                    CensorTypeChanged?.Invoke(mosaicRadioButton.Checked ? CensorType.Mosaic : CensorType.Blur); 
                } 
            };
            mosaicRadioButton.CheckedChanged += censorTypeHandler;
            blurRadioButton.CheckedChanged += censorTypeHandler;
            settingsGroup.Controls.AddRange(new Control[] { mosaicRadioButton, blurRadioButton });
            y += 30;

            // Í≤ÄÏó¥ Í∞ïÎèÑ ÏÑ§Ï†ï
            var strengthValueLabel = new Label { Text = "20", Location = new Point(390, y), AutoSize = true };
            var strengthSlider = new TrackBar { 
                Minimum = 10, Maximum = 40, Value = 20, TickFrequency = 5, 
                Location = new Point(100, y - 5), Size = new Size(280, 45) 
            };
            strengthSlider.ValueChanged += (s, e) => { 
                strengthValueLabel.Text = strengthSlider.Value.ToString(); 
                StrengthChanged?.Invoke(strengthSlider.Value); 
            };
            strengthLabel = new Label { Location = new Point(10, y), AutoSize = true };
            settingsGroup.Controls.AddRange(new Control[] { strengthLabel, strengthSlider, strengthValueLabel });
            y += 40;

            // Ïã†Î¢∞ÎèÑ ÏÑ§Ï†ï
            var confidenceValueLabel = new Label { Text = "0.3", Location = new Point(390, y), AutoSize = true };
            var confidenceSlider = new TrackBar { 
                Minimum = 10, Maximum = 90, Value = 30, TickFrequency = 10, 
                Location = new Point(100, y - 5), Size = new Size(280, 45) 
            };
            confidenceSlider.ValueChanged += (s, e) => { 
                float val = confidenceSlider.Value / 100.0f; 
                confidenceValueLabel.Text = val.ToString("F1"); 
                ConfidenceChanged?.Invoke(val); 
            };
            confidenceLabel = new Label { Location = new Point(10, y), AutoSize = true };
            settingsGroup.Controls.AddRange(new Control[] { confidenceLabel, confidenceSlider, confidenceValueLabel });
            y += 40;
            
            // ÌÉÄÍ≤ü ÏÑ†ÌÉù Í∑∏Î£π
            targetsGroup = new GroupBox { Location = new Point(10, y), Size = new Size(440, 130) };
            var allTargets = new[] { "ÏñºÍµ¥", "Í∞ÄÏä¥", "Í≤®ÎìúÎûëÏù¥", "Î≥¥ÏßÄ", "Î∞ú", "Î™∏ Ï†ÑÏ≤¥", "ÏûêÏßÄ", "Ìå¨Ìã∞", "Îàà", "ÏÜê", "ÍµêÎØ∏", "Ïã†Î∞ú", "Í∞ÄÏä¥_Ïò∑", "Ïó¨ÏÑ±" };
            var defaultTargets = new[] { "ÏñºÍµ¥", "Í∞ÄÏä¥", "Î≥¥ÏßÄ", "Ìå¨Ìã∞" };
            for (int i = 0; i < allTargets.Length; i++)
            {
                var checkbox = new CheckBox { 
                    Text = allTargets[i], // Ï¥àÍ∏∞ ÌÖçÏä§Ìä∏ (UpdateUITextÏóêÏÑú Î≤àÏó≠Îê®)
                    Checked = defaultTargets.Contains(allTargets[i]), 
                    Location = new Point(15 + (i % 3) * 140, 25 + (i / 3) * 20), 
                    AutoSize = true,
                    Tag = allTargets[i] // ÏõêÎ≥∏ ÌÇ§Î•º TagÏóê Ï†ÄÏû•
                };
                checkbox.CheckedChanged += OnTargetChanged;
                targetCheckBoxes[allTargets[i]] = checkbox;
                targetsGroup.Controls.Add(checkbox);
            }
            settingsGroup.Controls.Add(targetsGroup);
        }

        private void OnLanguageChanged(object sender, EventArgs e)
        {
            // ÏΩ§Î≥¥Î∞ïÏä§ÏóêÏÑú ÏÑ†ÌÉùÎêú Ïñ∏Ïñ¥Ïóê Îî∞Îùº Î¨∏ÌôîÍ∂å Ï†ïÎ≥¥Î•º Î≥ÄÍ≤ΩÌï©ÎãàÎã§.
            string culture = languageComboBox.SelectedIndex == 0 ? "ko-KR" : "en-US";
            Thread.CurrentThread.CurrentUICulture = new CultureInfo(culture);
            
            // Î≥ÄÍ≤ΩÎêú Î¨∏ÌôîÍ∂åÏóê ÎßûÏ∂∞ UI ÌÖçÏä§Ìä∏Î•º Îã§Ïãú Î°úÎìúÌï©ÎãàÎã§.
            UpdateUIText();
        }

        // UI ÌÖçÏä§Ìä∏Î•º Î¶¨ÏÜåÏä§ ÌååÏùºÏóêÏÑú Îã§Ïãú Î°úÎìúÌïòÎäî Î©îÏÑúÎìú
        private void UpdateUIText()
        {
            try
            {
                // Î¶¨ÏÜåÏä§ÏóêÏÑú ÌÖçÏä§Ìä∏Î•º Í∞ÄÏ†∏ÏôÄÏÑú UIÏóê Ï†ÅÏö©
                rootForm.Text = GetLocalizedString("AppTitle");
                titleLabel.Text = GetLocalizedString("AppTitle");

                controlGroup.Text = GetLocalizedString("GroupControls");
                startButton.Text = GetLocalizedString("ButtonStart");
                stopButton.Text = GetLocalizedString("ButtonStop");
                testButton.Text = GetLocalizedString("ButtonTest");
                
                settingsGroup.Text = GetLocalizedString("GroupSettings");
                fpsLabel.Text = GetLocalizedString("LabelFps");
                enableDetectionCheckBox.Text = GetLocalizedString("LabelDetection");
                enableCensoringCheckBox.Text = GetLocalizedString("LabelEffect");
                enableStickersCheckBox.Text = GetLocalizedString("LabelStickers");
                mosaicRadioButton.Text = GetLocalizedString("LabelCensorTypeMosaic");
                blurRadioButton.Text = GetLocalizedString("LabelCensorTypeBlur");
                strengthLabel.Text = GetLocalizedString("LabelCensorStrength");
                confidenceLabel.Text = GetLocalizedString("LabelConfidence");
                targetsGroup.Text = GetLocalizedString("GroupTargets");
                
                // Ï≤¥ÌÅ¨Î∞ïÏä§ ÌÖçÏä§Ìä∏Îì§ÎèÑ Î≤àÏó≠
                foreach (var kvp in targetCheckBoxes)
                {
                    var checkbox = kvp.Value;
                    var originalKey = (string)checkbox.Tag ?? kvp.Key; // TagÏóêÏÑú ÏõêÎ≥∏ ÌÇ§ Í∞ÄÏ†∏Ïò§Í∏∞
                    checkbox.Text = GetLocalizedString($"Target_{originalKey}");
                }
                
                logGroup.Text = GetLocalizedString("GroupLog");

                // GPU ÏÉÅÌÉúÎèÑ ÌòÑÏû¨ Ïñ∏Ïñ¥Î°ú Îã§Ïãú ÏóÖÎç∞Ïù¥Ìä∏ (Îçî ÏïàÏ†ÑÌïòÍ≤å)
                if (!string.IsNullOrEmpty(currentGpuStatus))
                {
#if DEBUG
                    Console.WriteLine($"[Ïñ∏Ïñ¥ Î≥ÄÍ≤Ω] GPU ÏÉÅÌÉú Ïû¨Î≤àÏó≠: '{currentGpuStatus}'");
#endif
                    string executionModeText = GetLocalizedString("LabelExecutionMode");
                    string translatedStatus = TranslateGpuStatus(currentGpuStatus);
                    gpuStatusLabel.Text = $"{executionModeText} {translatedStatus}";
                    
                    // ÏÉâÏÉÅÎèÑ Îã§Ïãú ÏÑ§Ï†ï (ÎèôÏùºÌïú Î°úÏßÅ ÏÇ¨Ïö©)
                    if (IsGpuStatus(currentGpuStatus))
                    {
                        gpuStatusLabel.ForeColor = Color.Green;
                    }
                    else
                    {
                        gpuStatusLabel.ForeColor = Color.OrangeRed;
                    }
                }

                // ÏÉÅÌÉú Î©îÏãúÏßÄÎèÑ ÌòÑÏû¨ Ïñ∏Ïñ¥Ïóê ÎßûÍ≤å ÏóÖÎç∞Ïù¥Ìä∏Ìï©ÎãàÎã§.
                if (startButton.Enabled)
                {
                    UpdateStatus(GetLocalizedString("StatusReady"), Color.Red);
                }
                else
                {
                    UpdateStatus(GetLocalizedString("StatusRunning"), Color.Green);
                }
            }
            catch (Exception ex)
            {
                // Î¶¨ÏÜåÏä§ Î°úÎìú Ïã§Ìå® Ïãú Í∏∞Î≥∏ ÌÖçÏä§Ìä∏ ÏÇ¨Ïö©
                Console.WriteLine($"Î¶¨ÏÜåÏä§ Î°úÎìú Ïã§Ìå®: {ex.Message}");
            }
        }

        private string GetLocalizedString(string key)
        {
            try
            {
                string result = resourceManager.GetString(key, Thread.CurrentThread.CurrentUICulture);
                return result ?? key; // ÌÇ§Î•º Ï∞æÏùÑ Ïàò ÏóÜÏúºÎ©¥ ÌÇ§ ÏûêÏ≤¥Î•º Î∞òÌôò
            }
            catch
            {
                return key; // Ïò§Î•ò Î∞úÏÉù Ïãú ÌÇ§ ÏûêÏ≤¥Î•º Î∞òÌôò
            }
        }
        
        // --- Í∏∞Ï°¥ Public Î©îÏÑúÎìú ---
        private void OnTargetChanged(object sender, EventArgs e)
        {
            var selected = targetCheckBoxes.Where(kvp => kvp.Value.Checked).Select(kvp => kvp.Key).ToList();
            TargetsChanged?.Invoke(selected);
        }

        public void UpdateStatus(string message, Color color) 
        { 
            if (rootForm.InvokeRequired) 
            { 
                rootForm.BeginInvoke(new Action(() => UpdateStatus(message, color))); 
                return; 
            } 
            statusLabel.Text = message; 
            statusLabel.ForeColor = color; 
        }

        public void LogMessage(string message) 
        { 
            if (rootForm.InvokeRequired) 
            { 
                rootForm.BeginInvoke(new Action(() => LogMessage(message))); 
                return; 
            } 
            logTextBox.AppendText($"[{DateTime.Now:HH:mm:ss}] {message}{Environment.NewLine}"); 
            logTextBox.SelectionStart = logTextBox.Text.Length; 
            logTextBox.ScrollToCaret(); 
        }

        public void SetRunningState(bool isRunning) 
        { 
            if (rootForm.InvokeRequired) 
            { 
                rootForm.BeginInvoke(new Action(() => SetRunningState(isRunning))); 
                return;
            } 
            startButton.Enabled = !isRunning; 
            stopButton.Enabled = isRunning; 
        }

        public void UpdateGpuStatus(string status)
        {
            if (rootForm.InvokeRequired)
            {
                rootForm.BeginInvoke(new Action(() => UpdateGpuStatus(status)));
                return;
            }
            
            string executionModeText = GetLocalizedString("LabelExecutionMode");
            string translatedStatus = TranslateGpuStatus(status);
            gpuStatusLabel.Text = $"{executionModeText} {translatedStatus}";
            
            if (status.Contains("GPU"))
            {
                gpuStatusLabel.ForeColor = Color.Green;
            }
            else
            {
                gpuStatusLabel.ForeColor = Color.OrangeRed;
            }
        }
        
        private string TranslateGpuStatus(string originalStatus)
        {
            // GPU ÏÉÅÌÉúÎ•º ÌòÑÏû¨ Ïñ∏Ïñ¥Î°ú Î≤àÏó≠ (Îçî Í¥ÄÎåÄÌïú GPU Í∞êÏßÄ)
            if (string.IsNullOrEmpty(originalStatus))
            {
                return GetLocalizedString("GPU_CPU");
            }
            
#if DEBUG
            // ÎîîÎ≤ÑÍπÖÏö© Î°úÍ∑∏
            Console.WriteLine($"[GPU Î≤àÏó≠] ÏûÖÎ†•: '{originalStatus}'");
#endif
            
            // ÎåÄÏÜåÎ¨∏Ïûê Íµ¨Î∂Ñ ÏóÜÏù¥ Ï†ïÌôïÌïú Îß§Ïπ≠
            string status = originalStatus.ToLower().Trim();
            
            // CUDA Í¥ÄÎ†® Î™®Îì† Í≤ΩÏö∞ Ï≤¥ÌÅ¨
            if (status.Contains("cuda"))
            {
#if DEBUG
                Console.WriteLine("[GPU Î≤àÏó≠] CUDAÎ°ú Îß§Ïπ≠Îê®");
#endif
                return GetLocalizedString("GPU_CUDA");
            }
            
            // DirectML Í¥ÄÎ†® Î™®Îì† Í≤ΩÏö∞ Ï≤¥ÌÅ¨
            if (status.Contains("directml"))
            {
#if DEBUG
                Console.WriteLine("[GPU Î≤àÏó≠] DirectMLÎ°ú Îß§Ïπ≠Îê®");
#endif
                return GetLocalizedString("GPU_DirectML");
            }
            
            // GPU Îã®Ïñ¥Í∞Ä Ìè¨Ìï®Îêú Î™®Îì† Í≤ΩÏö∞ (CPUÍ∞Ä Ìï®Íªò ÏûàÏñ¥ÎèÑ GPU Ïö∞ÏÑ†)
            if (status.Contains("gpu"))
            {
#if DEBUG
                Console.WriteLine("[GPU Î≤àÏó≠] ÏùºÎ∞ò GPUÎ°ú Îß§Ïπ≠Îê®");
#endif
                // DirectMLÏù∏ÏßÄ CUDAÏù∏ÏßÄ Î∂àÎ∂ÑÎ™ÖÌïú Í≤ΩÏö∞, ÏùºÎ∞òÏ†ÅÏù∏ GPUÎ°ú ÌëúÏãú
                return GetLocalizedString("GPU_CUDA"); 
            }
            
            // Î™ÖÏãúÏ†ÅÏúºÎ°ú CPUÏù∏ Í≤ΩÏö∞Îßå CPUÎ°ú ÌëúÏãú
            if (status.Contains("cpu") && !status.Contains("gpu"))
            {
#if DEBUG
                Console.WriteLine("[GPU Î≤àÏó≠] CPUÎ°ú Îß§Ïπ≠Îê®");
#endif
                return GetLocalizedString("GPU_CPU");
            }
            
            // Ïïå Ïàò ÏóÜÎäî Í≤ΩÏö∞, ÏõêÎ≥∏ Î¨∏ÏûêÏó¥Ïóê Îî∞Îùº Ï∂îÏ∏°
            // "Î°úÎìú Ïã§Ìå®", "Unknown" Îì±Ïùò Í≤ΩÏö∞ CPUÎ°ú Î∂ÑÎ•ò
            if (status.Contains("Ïã§Ìå®") || status.Contains("fail") || status.Contains("error"))
            {
#if DEBUG
                Console.WriteLine("[GPU Î≤àÏó≠] Ïò§Î•ò ÏÉÅÌÉúÎ°ú CPU ÏÑ†ÌÉù");
#endif
                return GetLocalizedString("GPU_CPU");
            }
            
            // Í∑∏ Ïô∏Ïùò Í≤ΩÏö∞Îäî GPUÎ°ú Í∞ÄÏ†ï (Îçî Í¥ÄÎåÄÌïòÍ≤å)
#if DEBUG
            Console.WriteLine($"[GPU Î≤àÏó≠] Ïïå Ïàò ÏóÜÎäî ÏÉÅÌÉú '{originalStatus}' - GPUÎ°ú Í∞ÄÏ†ï");
#endif
            return GetLocalizedString("GPU_CUDA");
        }
        
        private bool IsGpuStatus(string status)
        {
            // GPU ÏÉÅÌÉúÏù∏ÏßÄ ÌåêÎã®ÌïòÎäî ÌÜµÌï© Î©îÏÑúÎìú
            if (string.IsNullOrEmpty(status))
            {
                return false;
            }
            
            string lowerStatus = status.ToLower().Trim();
            
            // GPU Í¥ÄÎ†® ÌÇ§ÏõåÎìúÍ∞Ä ÏûàÏúºÎ©¥ GPUÎ°ú ÌåêÎã®
            if (lowerStatus.Contains("cuda") || 
                lowerStatus.Contains("directml") || 
                lowerStatus.Contains("gpu"))
            {
                // Îã®, Î™ÖÏãúÏ†ÅÏúºÎ°ú CPUÎßå ÏûàÎäî Í≤ΩÏö∞Îäî Ï†úÏô∏
                if (lowerStatus.Contains("cpu") && !lowerStatus.Contains("gpu"))
                {
                    return false;
                }
                return true;
            }
            
            // Ïò§Î•òÎÇò Ïã§Ìå® ÏÉÅÌÉúÎäî CPUÎ°ú Í∞ÑÏ£º
            if (lowerStatus.Contains("Ïã§Ìå®") || 
                lowerStatus.Contains("fail") || 
                lowerStatus.Contains("error") ||
                lowerStatus.Contains("cpu"))
            {
                return false;
            }
            
            // Ïïå Ïàò ÏóÜÎäî ÏÉÅÌÉúÎäî GPUÎ°ú Í∞ÄÏ†ï (Îçî Í¥ÄÎåÄÌïòÍ≤å)
            return true;
        }
    }
}